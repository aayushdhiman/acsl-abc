"""Aayush DhimanLoudoun Tupooze3/12/16"""#Functionsdef read(inputs):    inputs = inputs[2:]    ia = ['', '','','','','','','','','']    K = -1    for i in inputs:        if i == ',':            continue        if i.isdigit():            K = int(i)        else:            ia[K] = i    return iadef place(board, ia):    for row in board:        for col in row:            index = col['p']            if ia[index] != '':                col['L'] = ia[index]def replace(col0, col1, col2, k0 = '', k1 = '', k2 = ''):    L0 = col0['L']    L1 = col1['L']    L2 = col2['L']    if L0 == 'A' and L1 == 'B':        L2 = 'C'    elif L0 == 'A' and L1 == 'C':        L2 = 'B'    elif L0 == 'B' and L1 == 'A':        L2 = 'C'    elif L0 == 'B' and L1 == 'C':        L2 = 'A'    elif L0 == 'C' and L1 == 'A':        L2 = 'B'    elif L0 == 'C' and L1 == 'B':        L2 = 'A'    elif L0 == 'A' and L2 == 'B':        L1 = 'C'    elif L0 == 'A' and L2 == 'C':        L1 = 'B'    elif L0 == 'B' and L2 == 'A':        L1 = 'C'    elif L0 == 'B' and L2 == 'C':        L1 = 'A'    elif L0 == 'C' and L2 == 'A':        L1 = 'B'    elif L0 == 'C' and L2 == 'B':        L1 = 'A'    elif L1 == 'A' and L2 == 'B':        L0 = 'C'    elif L1 == 'A' and L2 == 'C':        L0 = 'B'    elif L1 == 'B' and L2 == 'A':        L0 = 'C'    elif L1 == 'B' and L2 == 'C':        L0 = 'A'    elif L1 == 'C' and L2 == 'A':        L0 = 'B'    elif L1 == 'C' and L2 == 'B':        L0 = 'A'    #L1 Determination w/ k1    if L1 == '' and k1 == 'C' and L0 == 'A':        L1 = 'B'    elif L1 == '' and k1 == 'B' and L0 == 'A':        L1 = 'C'    elif L1 == '' and k1 == 'A' and L0 == 'B':        L1 = 'C'    elif L1 == '' and k1 == 'C' and L0 == 'B':        L1 = 'A'    elif L1 == '' and k1 == 'A' and L0 == 'C':        L1 = 'B'    elif L1 == '' and k1 == 'B' and L0 == 'C':        L1 = 'A'    if L1 == '' and k1 == 'C' and L2 == 'A':        L1 = 'B'    elif L1 == '' and k1 == 'B' and L2 == 'A':        L1 = 'C'    elif L1 == '' and k1 == 'A' and L2 == 'B':        L1 = 'C'    elif L1 == '' and k1 == 'C' and L2 == 'B':        L1 = 'A'    elif L1 == '' and k1 == 'A' and L2 == 'C':        L1 = 'B'    elif L1 == '' and k1 == 'B' and L2 == 'C':        L1 = 'A'    #L0 Determination w/ k0    if L0 == '' and k0 == 'C' and L1 == 'A':        L0 = 'B'    elif L0 == '' and k0 == 'B' and L1 == 'A':        L0 = 'C'    elif L0 == '' and k0 == 'A' and L1 == 'B':        L0 = 'C'    elif L0 == '' and k0 == 'C' and L1 == 'B':        L0 = 'A'    elif L0 == '' and k0 == 'A' and L1 == 'C':        L0 = 'B'    elif L0 == '' and k0 == 'B' and L1 == 'C':        L0 = 'A'    if L0 == '' and k0 == 'C' and L2 == 'A':        L0 = 'B'    elif L0 == '' and k0 == 'B' and L2 == 'A':        L0 = 'C'    elif L0 == '' and k0 == 'A' and L2 == 'B':        L0 = 'C'    elif L0 == '' and k0 == 'C' and L2 == 'B':        L0 = 'A'    elif L0 == '' and k0 == 'A' and L2 == 'C':        L0 = 'B'    elif L0 == '' and k0 == 'B' and L2 == 'C':        L0 = 'A'    #L2 Determination w/ k2    if L2 == '' and k2 == 'C' and L0 == 'A':        L2 = 'B'    elif L2 == '' and k2 == 'B' and L0 == 'A':        L2 = 'C'    elif L2 == '' and k2 == 'A' and L0 == 'B':        L2 = 'C'    elif L2 == '' and k2 == 'C' and L0 == 'B':        L2 = 'A'    elif L2 == '' and k2 == 'A' and L0 == 'C':        L2 = 'B'    elif L2 == '' and k2 == 'B' and L0 == 'C':        L2 = 'A'    if L2 == '' and k2 == 'C' and L1 == 'A':        L2 = 'B'    elif L2 == '' and k2 == 'B' and L1 == 'A':        L2 = 'C'    elif L2 == '' and k2 == 'A' and L1 == 'B':        L2 = 'C'    elif L2 == '' and k2 == 'C' and L1 == 'B':        L2 = 'A'    elif L2 == '' and k2 == 'A' and L1 == 'C':        L2 = 'B'    elif L2 == '' and k2 == 'B' and L1 == 'C':        L2 = 'A'    if L0 != '' and col0['L'] == '':        col0['L'] = L0    elif L1 != '' and col1['L'] == '':        col1['L'] = L1    elif L2 != '' and col2['L'] == '':        col2['L'] = L2def knowledgeFinder(row, skipPos):    for i in range(len(row)):        if i == skipPos:            continue        if row[i]['L'] != '':            return row[i]['L']def solve(board):    for r in range(len(board)):        row = board[r]        for c in range(len(row)):            if c == 0:                replace(row[c], row[c+1], row[c+2])                if r == 0:                    k0 = knowledgeFinder(board[r], c)                    k1 = knowledgeFinder(board[r+1], c)                    k2 = knowledgeFinder(board[r+2], c)                    replace(board[r][c], board[r+1][c], board[r+2][c], k0, k1, k2)                elif r == 1:                    k0 = knowledgeFinder(board[r-1], c)                    k1 = knowledgeFinder(board[r], c)                    k2 = knowledgeFinder(board[r+1], c)                    replace(board[r-1][c], board[r][c], board[r+1][c], k0, k1, k2)                elif r == 2:                    k0 = knowledgeFinder(board[r-2], c)                    k1 = knowledgeFinder(board[r-1], c)                    k2 = knowledgeFinder(board[r], c)                    replace(board[r-2][c], board[r-1][c], board[r][c], k0, k1, k2)            elif c == 1:                replace(row[c-1], row[c], row[c+1])                if r == 0:                    k0 = knowledgeFinder(board[r], c)                    k1 = knowledgeFinder(board[r+1], c)                    k2 = knowledgeFinder(board[r+2], c)                    replace(board[r][c], board[r+1][c], board[r+2][c], k0, k1, k2)                elif r == 1:                    k0 = knowledgeFinder(board[r-1], c)                    k1 = knowledgeFinder(board[r], c)                    k2 = knowledgeFinder(board[r+1], c)                    replace(board[r-1][c], board[r][c], board[r+1][c], k0, k1, k2)                elif r == 2:                    k0 = knowledgeFinder(board[r-2], c)                    k1 = knowledgeFinder(board[r-1], c)                    k2 = knowledgeFinder(board[r], c)                    replace(board[r-2][c], board[r-1][c], board[r][c], k0, k1, k2)            elif c == 2:                replace(row[c-2], row[c-1], row[c])                if r == 0:                    k0 = knowledgeFinder(board[r], c)                    k1 = knowledgeFinder(board[r+1], c)                    k2 = knowledgeFinder(board[r+2], c)                    replace(board[r][c], board[r+1][c], board[r+2][c])                elif r == 1:                    k0 = knowledgeFinder(board[r-1], c)                    k1 = knowledgeFinder(board[r], c)                    k2 = knowledgeFinder(board[r+1], c)                    replace(board[r-1][c], board[r][c], board[r+1][c])                elif r == 2:                    k0 = knowledgeFinder(board[r-2], c)                    k1 = knowledgeFinder(board[r-1], c)                    k2 = knowledgeFinder(board[r], c)                    replace(board[r-2][c], board[r-1][c], board[r][c])def printLetters(board):    output = ''    for row in board:        for col in row:            output += col['L']    return output#Main Programboard = [[{'p': 1, 'L': ''}, {'p': 2, 'L': ''}, {'p': 3, 'L': ''}],          [{'p': 4, 'L': ''}, {'p': 5, 'L': ''}, {'p': 6, 'L': ''}],          [{'p': 7, 'L': ''}, {'p': 8, 'L': ''}, {'p': 9, 'L': ''}]]for i in range(5):    inputs = input('Enter your input: ')    #inputs = '3,1,A,6,C,8,B'    ia = read(inputs)    place(board, ia)    solve(board)    output = printLetters(board)    print(output)